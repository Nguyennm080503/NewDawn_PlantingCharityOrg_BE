// <auto-generated />
using System;
using DAO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAO.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BussinessObjects.Models.BannerMember", b =>
                {
                    b.Property<int>("BannerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannerID"));

                    b.Property<string>("BannerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BannerID");

                    b.HasIndex("MemberID");

                    b.ToTable("BannerMember");
                });

            modelBuilder.Entity("BussinessObjects.Models.Collaborator", b =>
                {
                    b.Property<int>("CollaboratorID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CollaboratorID");

                    b.ToTable("Collaborator");
                });

            modelBuilder.Entity("BussinessObjects.Models.ImageDetail", b =>
                {
                    b.Property<int>("ImageDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageDetailID"));

                    b.Property<int>("TrackingID")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageDetailID");

                    b.HasIndex("TrackingID");

                    b.ToTable("ImageDetail");
                });

            modelBuilder.Entity("BussinessObjects.Models.MemberRegisterPackage", b =>
                {
                    b.Property<int>("MemberRegisterPackagenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberRegisterPackagenID"));

                    b.Property<DateTime?>("DateExpire")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<double>("PackageFee")
                        .HasColumnType("float");

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<int?>("RegisterID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MemberRegisterPackagenID");

                    b.HasIndex("PackageID");

                    b.HasIndex("RegisterID");

                    b.ToTable("MemberRegisterPackage");
                });

            modelBuilder.Entity("BussinessObjects.Models.Package", b =>
                {
                    b.Property<int>("PackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageID"));

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<double>("PackageFee")
                        .HasColumnType("float");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PackageID");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("BussinessObjects.Models.PaymentTransaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"));

                    b.Property<string>("AccountBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmout")
                        .HasColumnType("float");

                    b.HasKey("TransactionID");

                    b.HasIndex("AccountID");

                    b.ToTable("PaymentTransaction");
                });

            modelBuilder.Entity("BussinessObjects.Models.PaymentTransactionDetail", b =>
                {
                    b.Property<int>("PaymentDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentDetailID"));

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalQuantity")
                        .HasColumnType("float");

                    b.HasKey("PaymentDetailID");

                    b.HasIndex("PaymentID");

                    b.ToTable("PaymentTransactionDetail");
                });

            modelBuilder.Entity("BussinessObjects.Models.PlantCode", b =>
                {
                    b.Property<string>("PlantCodeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTransactionDetailID")
                        .HasColumnType("int");

                    b.Property<string>("Provice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviceAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantCodeID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("PaymentTransactionDetailID");

                    b.ToTable("PlantCode");
                });

            modelBuilder.Entity("BussinessObjects.Models.PlantTracking", b =>
                {
                    b.Property<int>("TrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingID"));

                    b.Property<string>("ContentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlantCodeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TrackingID");

                    b.HasIndex("PlantCodeID");

                    b.ToTable("PlantTracking");
                });

            modelBuilder.Entity("BussinessObjects.Models.PostingDetail", b =>
                {
                    b.Property<int>("PostingDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostingDetailID"));

                    b.Property<int>("PostingNewsID")
                        .HasColumnType("int");

                    b.Property<string>("URLPosting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostingDetailID");

                    b.HasIndex("PostingNewsID");

                    b.ToTable("PostingDetail");
                });

            modelBuilder.Entity("BussinessObjects.Models.PostingNews", b =>
                {
                    b.Property<int>("NewsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsID"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewsDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerCreateID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NewsID");

                    b.HasIndex("OwnerCreateID");

                    b.ToTable("PostingNew");
                });

            modelBuilder.Entity("BussinessObjects.Models.UserInformation", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.ToTable("UserInformation");
                });

            modelBuilder.Entity("BussinessObjects.Models.BannerMember", b =>
                {
                    b.HasOne("BussinessObjects.Models.Collaborator", "Collaborator")
                        .WithMany("BannerMembers")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Collaborator");
                });

            modelBuilder.Entity("BussinessObjects.Models.Collaborator", b =>
                {
                    b.HasOne("BussinessObjects.Models.UserInformation", "UserInformation")
                        .WithOne("Collaborator")
                        .HasForeignKey("BussinessObjects.Models.Collaborator", "CollaboratorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("BussinessObjects.Models.ImageDetail", b =>
                {
                    b.HasOne("BussinessObjects.Models.PlantTracking", "PlantTracking")
                        .WithMany("PlantImageDetails")
                        .HasForeignKey("TrackingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlantTracking");
                });

            modelBuilder.Entity("BussinessObjects.Models.MemberRegisterPackage", b =>
                {
                    b.HasOne("BussinessObjects.Models.Package", "Package")
                        .WithMany("RegisterPackages")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BussinessObjects.Models.Collaborator", "Register")
                        .WithMany("UserMemberRegistrations")
                        .HasForeignKey("RegisterID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Package");

                    b.Navigation("Register");
                });

            modelBuilder.Entity("BussinessObjects.Models.PaymentTransaction", b =>
                {
                    b.HasOne("BussinessObjects.Models.UserInformation", "UserInformation")
                        .WithMany("UserTransactions")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("BussinessObjects.Models.PaymentTransactionDetail", b =>
                {
                    b.HasOne("BussinessObjects.Models.PaymentTransaction", "PaymentTransaction")
                        .WithMany("PaymentTransactionDetails")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentTransaction");
                });

            modelBuilder.Entity("BussinessObjects.Models.PlantCode", b =>
                {
                    b.HasOne("BussinessObjects.Models.UserInformation", "UserInformation")
                        .WithMany("UserPlants")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Models.PaymentTransactionDetail", "PaymentTransactionDetail")
                        .WithMany("PlantCodes")
                        .HasForeignKey("PaymentTransactionDetailID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentTransactionDetail");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("BussinessObjects.Models.PlantTracking", b =>
                {
                    b.HasOne("BussinessObjects.Models.PlantCode", "PlantCode")
                        .WithMany("PlantTrackings")
                        .HasForeignKey("PlantCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlantCode");
                });

            modelBuilder.Entity("BussinessObjects.Models.PostingDetail", b =>
                {
                    b.HasOne("BussinessObjects.Models.PostingNews", "PostingNews")
                        .WithMany("Details")
                        .HasForeignKey("PostingNewsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PostingNews");
                });

            modelBuilder.Entity("BussinessObjects.Models.PostingNews", b =>
                {
                    b.HasOne("BussinessObjects.Models.UserInformation", "UserInformation")
                        .WithMany("UserPostings")
                        .HasForeignKey("OwnerCreateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("BussinessObjects.Models.Collaborator", b =>
                {
                    b.Navigation("BannerMembers");

                    b.Navigation("UserMemberRegistrations");
                });

            modelBuilder.Entity("BussinessObjects.Models.Package", b =>
                {
                    b.Navigation("RegisterPackages");
                });

            modelBuilder.Entity("BussinessObjects.Models.PaymentTransaction", b =>
                {
                    b.Navigation("PaymentTransactionDetails");
                });

            modelBuilder.Entity("BussinessObjects.Models.PaymentTransactionDetail", b =>
                {
                    b.Navigation("PlantCodes");
                });

            modelBuilder.Entity("BussinessObjects.Models.PlantCode", b =>
                {
                    b.Navigation("PlantTrackings");
                });

            modelBuilder.Entity("BussinessObjects.Models.PlantTracking", b =>
                {
                    b.Navigation("PlantImageDetails");
                });

            modelBuilder.Entity("BussinessObjects.Models.PostingNews", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("BussinessObjects.Models.UserInformation", b =>
                {
                    b.Navigation("Collaborator")
                        .IsRequired();

                    b.Navigation("UserPlants");

                    b.Navigation("UserPostings");

                    b.Navigation("UserTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
